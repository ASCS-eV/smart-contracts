#import "errors.jsligo" "Errors"
#import "token.jsligo" "Token"

type owner    = address;
type operator = address;

export type t = big_map<[owner, operator, Token.T], unit>;

export const assert_authorisation = (
   from_ : address,
   token_id : Token.T,
   operators : t
): unit => {
   const sender_ = Tezos.get_sender();
   if (sender_ == from_) {
      return;
   } else {
      match(Big_map.find_opt([from_, sender_, token_id], operators)) {
         when(Some(v)): do { return v };
         when(None): failwith(Errors.not_operator) as unit;
      };
      
      return;
   };
};

const assert_update_permission = (owner: owner): unit => {
   Assert.Error.assert(owner == Tezos.get_sender(), Errors.only_sender_manage_operators);
};

export const add_operator = (
   operators: t,
   owner: owner,
   operator: operator,
   token_id: Token.T
): t => {
   if (owner == operator) {
      return operators;
   } else {
      assert_update_permission(owner);
      return Big_map.add([owner, operator, token_id], unit, operators);
   };
};

export const remove_operator = (
   operators: t,
   owner: owner,
   operator: operator,
   token_id: Token.T
): t => {
   if (owner == operator) {
      return operators;
   } else {
      assert_update_permission(owner);
      return Big_map.remove([owner, operator, token_id], operators);

   };
};
