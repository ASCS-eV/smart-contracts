#import "./marketplace.jsligo" "Contract"
#import "./data/tokenMetadata.jsligo" "TokenMetadata"

#import "../registry/registry.jsligo" "Registry"
#import "../registry/storage.jsligo" "RegistryStorage"


const initial_storage = {
  registry: "KT1P2kUcD97mqQWi7WMJfJaWSKZ6yU7caGTh" as address,
  metadata: Big_map.empty as Contract.Generic.Metadata.t,
  token_index: 0 as nat,
  ledger: Big_map.empty as Contract.Generic.Ledger.NFT.L,
  token_metadata: Big_map.empty as Contract.Generic.TokenMetadata.T,
  operators: Some(Big_map.empty as Contract.Generic.Operators.t),
  approvals: Big_map.empty as Contract.Generic.Approvals.T,
};

const registry_intial_storage = {
  member_registry: Big_map.literal(list([
    [("tz1hkMbkLPkvhxyqsQoBoLPqb1mruSzZx3zy" as address), ({
      did: "tz1hkMbkLPkvhxyqsQoBoLPqb1mruSzZx3zy" as address,
      status: Active(),
      issuer: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8",
      uuid: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff"
    })]
  ])),
  trust_anchor: {
    did: "tz1ggujjYjA7oYoaZBzTg1tYSXn3VMjcgDuv" as address,
    status: Active(),
    uuid: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8"
  },
  user_registry: Big_map.literal(list([
    ["urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", ({
      did: "tz1hkMbkLPkvhxyqsQoBoLPqb1mruSzZx3zy" as address,
      status: Active(),
      issuer: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff",
      uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab"
    })]
  ])),
  metadata: Big_map.empty as RegistryStorage.Types.metadata,
};

const run_mint_test = () => {
    Test.Next.State.reset(3n, [] as list <tez>);
    const _admin = Test.Next.Account.address(0);
    const bob = Test.Next.Account.address(1n);
    const alice = Test.Next.Account.address(2n);

    const member_registry = Big_map.literal(list([
      [(bob as address), ({
        did: bob as address,
        status: Active(),
        issuer: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8",
        uuid: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff"
      })]
    ]));

    const user_registry = Big_map.literal(list([
      ["urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", ({
        did: alice as address,
        status: Active(),
        issuer: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff",
        uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab"
      })]
    ]));

    const registry = Test.Next.Originate.contract(contract_of(Registry), { ...registry_intial_storage, member_registry, user_registry }, 0tez);
    const registryAddress = Test.Next.Typed_address.to_address(registry.taddr);

    const storage = {...initial_storage, registry: registryAddress as address};
    const orig = Test.Next.Originate.contract(contract_of(Contract), storage, 10tez);
    
    const args: Contract.Generic.Mint.MintParam = {
      from_uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab",
      to_: bob as address,
      token_info: Some(Map.literal([
        ["", bytes`ipfs://tokenMetadataCID`]
      ]))
    };

    Test.Next.State.set_source(alice);
    const _result = Test.Next.Contract.transfer_exn(Test.Next.Typed_address.get_entrypoint("mint", orig.taddr), args, 0tez);

    const new_storage = {
      registry: registryAddress as address,
      metadata: Big_map.empty as Contract.Generic.Metadata.t,
      token_index: 1 as nat,
      ledger: Big_map.literal([
        [0 as nat, bob]
      ]) as Contract.Generic.Ledger.NFT.L,
      token_metadata: Big_map.literal([
        [0 as nat, {
          token_id: 0 as nat,
          token_info: Map.literal([
            ["", bytes`ipfs://tokenMetadataCID`]
          ])
        }]
      ]),
      operators: Some(Big_map.empty as Contract.Generic.Operators.t),
      approvals: Big_map.empty as Contract.Generic.Approvals.T,
    } as Contract.Storage;

    return Assert.assert(Test.Next.Compare.eq(Test.Next.Typed_address.get_storage(orig.taddr), new_storage));
};

const test_mint = run_mint_test();

const run_failed_minting_not_allowed_invalid_user_test = () => {
    Test.Next.State.reset(3n, [] as list <tez>);
    const _admin = Test.Next.Account.address(0);
    const bob = Test.Next.Account.address(1n);
    const alice = Test.Next.Account.address(2n);

    const member_registry = Big_map.literal(list([
      [(bob as address), ({
        did: bob as address,
        status: Revoked(),
        issuer: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8",
        uuid: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff"
      })]
    ]));

    const user_registry = Big_map.literal(list([
      ["urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", ({
        did: alice as address,
        status: Active(),
        issuer: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff",
        uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab"
      })]
    ]));

    const registry = Test.Next.Originate.contract(contract_of(Registry), { ...registry_intial_storage, member_registry, user_registry }, 0tez);
    const registryAddress = Test.Next.Typed_address.to_address(registry.taddr);
    const storage = {...initial_storage, registry: registryAddress as address};
    const orig = Test.Next.Originate.contract(contract_of(Contract), storage, 0tez);
    const args: Contract.Generic.Mint.MintParam = {
      from_uuid: "urn:uuid:INVALID_UUID", // invalid uuid
      to_: bob as address,
      token_info: Some(Map.literal([
        ["", bytes`ipfs://tokenMetadataCID`]
      ]))
    };
    const result = Test.Next.Contract.transfer(Test.Next.Typed_address.get_entrypoint("mint", orig.taddr), args, 0tez);

    match(result) {
      when(Fail(_x)): Test.Next.IO.log("Failed Minting not allowed with invalid user test as expected");
      when(Success(_s)): failwith("This should not succeed")
    };
};

const test_failed_minting_not_allowed_invalid_user_test = run_failed_minting_not_allowed_invalid_user_test();

const run_failed_minting_not_allowed_inactive_member_test = () => {
    Test.Next.State.reset(3n, [] as list <tez>);
    const _admin = Test.Next.Account.address(0);
    const bob = Test.Next.Account.address(1n);
    const alice = Test.Next.Account.address(2n);

    const member_registry = Big_map.literal(list([
      [(bob as address), ({
        did: bob as address,
        status: Revoked(),
        issuer: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8",
        uuid: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff"
      })]
    ]));

    const user_registry = Big_map.literal(list([
      ["urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", ({
        did: alice as address,
        status: Active(),
        issuer: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff",
        uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab"
      })]
    ]));
    const registry = Test.Next.Originate.contract(contract_of(Registry), { ...registry_intial_storage, member_registry, user_registry}, 0tez);
    const registryAddress = Test.Next.Typed_address.to_address(registry.taddr);
    
    const storage = {...initial_storage, registry: registryAddress as address};
    const orig = Test.Next.Originate.contract(contract_of(Contract), storage, 0tez);
    const args: Contract.Generic.Mint.MintParam = {
      from_uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", // invalid uuid
      to_: bob as address,
      token_info: Some(Map.literal([
        ["", bytes`ipfs://tokenMetadataCID`]
      ]))
    };
    const result = Test.Next.Contract.transfer(Test.Next.Typed_address.get_entrypoint("mint", orig.taddr), args, 0tez);

    match(result) {
      when(Fail(_x)): Test.Next.IO.log("Failed Minting not allowed with invactive member test as expected");
      when(Success(_s)): failwith("This should not succeed")
    };
};

const test_failed_minting_not_allowed_inactive_member_test = run_failed_minting_not_allowed_inactive_member_test();

const run_failed_mint_not_NFT_test = () => {
    Test.Next.State.reset(3n, [] as list <tez>);
    const _admin = Test.Next.Account.address(0);
    const bob = Test.Next.Account.address(1n);
    const alice = Test.Next.Account.address(2n);

    const member_registry = Big_map.literal(list([
      [(bob as address), ({
        did: bob as address,
        status: Active(),
        issuer: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8",
        uuid: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff"
      })]
    ]));

    const user_registry = Big_map.literal(list([
      ["urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", ({
        did: alice as address,
        status: Active(),
        issuer: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff",
        uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab"
      })]
    ]));

    const registry = Test.Next.Originate.contract(contract_of(Registry), { ...registry_intial_storage, member_registry,  user_registry }, 0tez);
    const registryAddress = Test.Next.Typed_address.to_address(registry.taddr);
    const storage = {...initial_storage, registry: registryAddress as address};
    const orig = Test.Next.Originate.contract(contract_of(Contract), storage, 0tez);
    const args: Contract.Generic.Mint.MintParam = {
      from_uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab",
      to_: bob as address,
      token_info: Some(Map.literal([
        ["", bytes`ipfs://tokenMetadataCID`]
      ]))
    };
    const result = Test.Next.Contract.transfer(Test.Next.Typed_address.get_entrypoint("mint", orig.taddr), args, 0tez);

    match(result) {
      when(Fail(_x)): Test.Next.IO.log("Failed NON NFT test as expected");
      when(Success(_s)): failwith("This should not succeed")
    };
};

const test_failed_mint_not_NFT = run_failed_mint_not_NFT_test();

const run_failed_mint_existing_token_test = () => {
    Test.Next.State.reset(3n, [] as list <tez>);
    const _admin = Test.Next.Account.address(0);
    const bob = Test.Next.Account.address(1n);
    const alice = Test.Next.Account.address(2n);

    const member_registry = Big_map.literal(list([
      [(bob as address), ({
        did: bob as address,
        status: Active(),
        issuer: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8",
        uuid: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff"
      })]
    ]));

    const user_registry = Big_map.literal(list([
      ["urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", ({
        did: alice as address,
        status: Active(),
        issuer: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff",
        uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab"
      })]
    ]));

    const registry = Test.Next.Originate.contract(contract_of(Registry), { ...registry_intial_storage, member_registry, user_registry }, 0tez);
    const registryAddress = Test.Next.Typed_address.to_address(registry.taddr);
    const storage = {...initial_storage, registry: registryAddress as address};
    const orig = Test.Next.Originate.contract(contract_of(Contract), storage, 0tez);
    const args: Contract.Generic.Mint.MintParam = {
      from_uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab",
      to_: bob as address,
      token_info: Some(Map.literal([
        ["", bytes`ipfs://tokenMetadataCID`]
      ]))
    };
    const _result = Test.Next.Contract.transfer(Test.Next.Typed_address.get_entrypoint("mint", orig.taddr), args, 0tez);
    const result2 = Test.Next.Contract.transfer(Test.Next.Typed_address.get_entrypoint("mint", orig.taddr), args, 0tez);

    match(result2) {
      when(Fail(_x)): Test.Next.IO.log("Failed existing token test as expected");
      when(Success(_s)): failwith("This should not succeed")
    };
};

const test_failed_mint_existing_token = run_failed_mint_existing_token_test();

const run_test_transfer = () => {
    Test.Next.State.reset(3n, [] as list <tez>);
    const _admin = Test.Next.Account.address(0);
    const bob = Test.Next.Account.address(1n);
    const alice = Test.Next.Account.address(2n);

    const member_registry = Big_map.literal(list([
      [(bob as address), ({
        did: bob as address,
        status: Active(),
        issuer: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8",
        uuid: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff"
      })]
    ]));

    const user_registry = Big_map.literal(list([
      ["urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", ({
        did: alice as address,
        status: Active(),
        issuer: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff",
        uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab"
      })]
    ]));

    const registry = Test.Next.Originate.contract(contract_of(Registry), { ...registry_intial_storage, member_registry, user_registry }, 0tez);
    const registryAddress = Test.Next.Typed_address.to_address(registry.taddr);
    const storage = {...initial_storage, registry: registryAddress as address};
    const orig = Test.Next.Originate.contract(contract_of(Contract), storage, 0tez);
    
    const mint_args: Contract.Generic.Mint.MintParam = {
      from_uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab",
      to_: bob as address,
      token_info: Some(Map.literal([
        ["", bytes`ipfs://tokenMetadataCID`]
      ]))
    };
    Test.Next.State.set_source(alice);
    const _mint_result = Test.Next.Contract.transfer_exn(Test.Next.Typed_address.get_entrypoint("mint", orig.taddr), mint_args, 0tez);

    const transfer_args: Contract.Generic.Transfer.t = [{
      from_: bob as address,
      txs: [{
        to_: alice as address,
        token_id: 0 as nat,
        amount: 1n
      }]
    }];

    Test.Next.State.set_source(bob);
    const _transfer_result = Test.Next.Contract.transfer_exn(Test.Next.Typed_address.get_entrypoint("transfer", orig.taddr), transfer_args, 0tez);
    const new_storage = Test.Next.Typed_address.get_storage(orig.taddr);
    
    Assert.assert(Test.Next.Compare.eq(Big_map.find_opt(0 as nat, new_storage.ledger), Some(alice)));
    return Assert.assert(Test.Next.Compare.eq(Test.Next.Typed_address.get_storage(orig.taddr), new_storage));
};

const test_transfer = run_test_transfer();

const run_test_update_operators = () => {
  Test.Next.State.reset(3n, [] as list <tez>);
  const admin = Test.Next.Account.address(0);
  const bob = Test.Next.Account.address(1n);
  const alice = Test.Next.Account.address(2n);

  const member_registry = Big_map.literal(list([
    [(bob as address), ({
      did: bob as address,
      status: Active(),
      issuer: "urn:uuid:1b752c7f-3de3-1759-bce2-46416a6823e8",
      uuid: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff"
    })]
  ]));

  const user_registry = Big_map.literal(list([
      ["urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab", ({
        did: alice as address,
        status: Active(),
        issuer: "urn:uuid:ecb5685d-0708-4fa8-b9e4-966a0f1d12ff",
        uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab"
      })]
    ]));

  const registry = Test.Next.Originate.contract(contract_of(Registry), { ...registry_intial_storage, member_registry, user_registry }, 0tez);
  const registryAddress = Test.Next.Typed_address.to_address(registry.taddr);
  const storage = {...initial_storage, registry: registryAddress as address};
  const orig = Test.Next.Originate.contract(contract_of(Contract), storage, 0tez);

  const mint_args: Contract.Generic.Mint.MintParam = {
    from_uuid: "urn:uuid:c0597222-5b0f-49fc-8078-7cbdc738c4ab",
    to_: bob as address,
    token_info: Some(Map.literal([
      ["", bytes`ipfs://tokenMetadataCID`]
    ]))
  };

  Test.Next.State.set_source(alice);
  const _mint_result = Test.Next.Contract.transfer_exn(Test.Next.Typed_address.get_entrypoint("mint", orig.taddr), mint_args, 0tez);

  const update_operators_args = [
    AddOperator( {
      owner: bob as address,
      operator: admin as address,
      token_id: 0 as nat
    })
  ];

  Test.Next.State.set_source(bob);
  const _update_operators_result = Test.Next.Contract.transfer_exn(Test.Next.Typed_address.get_entrypoint("update_operators", orig.taddr), update_operators_args, 0tez);
  const new_storage = Test.Next.Typed_address.get_storage(orig.taddr);

  return Assert.assert(Test.Next.Compare.eq(Big_map.find_opt([bob, 0 as nat], Option.value_with_error("No Operators", new_storage.operators)), Some(Set.literal([admin]))));
}

const test_update_operators = run_test_update_operators();
